# 工作流：构建并发布 JAR 到 GitHub Releases
name: Java CI with Gradle

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write # 允许写入仓库内容以创建 Release

jobs:
  build:
    runs-on: ubuntu-latest # 使用 GitHub 提供的 Ubuntu 最新镜像

    steps:
      # 检出仓库代码
      - uses: actions/checkout@v4

      # 安装并缓存 JDK 21（Temurin）；启用 Gradle 依赖缓存
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      # 配置 Gradle（验证 wrapper、加速缓存）
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      # 赋予 gradlew 执行权限
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 构建产物：清理并生成 jar，输出到 build/libs/
      - name: Build with Gradle
        run: ./gradlew clean jar
      - name: Verify JAR artifact exists
        run: |
          if ls build/libs/*.jar >/dev/null 2>&1; then
            echo "JAR found."
          else
            echo "::error::No JAR found in build/libs. Ensure your Gradle project produces a jar (apply 'java' plugin and have sources)."
            exit 1
          fi

      # 发布 Release：仅在标签触发时执行，附加 jar 并生成说明
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          tag_name: ${{ github.ref_name }} # 当前标签名
          name: Release ${{ github.ref_name }} # Release 标题
          draft: false # 非草稿，直接发布
          prerelease: false # 非预发布
          generate_release_notes: true # 自动生成 Release Notes
          files: build/libs/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub 自动提供的令牌